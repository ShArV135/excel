<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Timetable;
use Doctrine\ORM\EntityRepository;

/**
 * TimetableRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TimetableRepository extends EntityRepository
{
    /**
     * @return Timetable|null|object
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function getLastOrCreateTable()
    {
        $timetable = $this->findOneBy([], ['id' => 'DESC']);

        if (!$timetable) {
            $timetable = $this->create();
        }

        return $timetable;
    }

    /**
     * @param Timetable $timetable
     * @param bool      $include
     * @return array
     */
    public function getAllPrevious(Timetable $timetable, $include = true)
    {
        $qb = $this->createQueryBuilder('timetable');

        if ($include) {
            $qb->where($qb->expr()->lte('timetable.id', ':id'));
        } else {
            $qb->where($qb->expr()->lt('timetable.id', ':id'));
        }

        $qb->setParameter('id', $timetable);

        return $qb->getQuery()->getResult();
    }

    /**
     * @return Timetable
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function create()
    {
        $em = $this->getEntityManager();

        $timetable = new Timetable();

        $i = 0;

        do {
            $name = sprintf('Табель %s', date('m.Y'));
            if ($i > 0) {
                $name .= sprintf(' [%s]', $i);
            }
            $i++;
            $timetable->setName($name);
        } while ($em->getRepository('AppBundle:Timetable')->findOneBy(['name' => $name]));

        $em->persist($timetable);
        $em->flush();

        return $timetable;
    }
}
