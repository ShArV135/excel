<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Contractor;
use AppBundle\Entity\Timetable;
use AppBundle\Entity\TimetableRow;
use AppBundle\Entity\TimetableRowTimes;
use Doctrine\ORM\EntityRepository;

/**
 * TimetableRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TimetableRowTimesRepository extends EntityRepository
{
    /**
     * @param Timetable    $timetable
     * @param TimetableRow $timetableRow
     * @return array
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function getTimesOrCreate(Timetable $timetable, TimetableRow $timetableRow)
    {
        $times = $this->findOneBy([
            'timetable' => $timetable,
            'timetableRow' => $timetableRow,
        ]);

        if (!$times) {
            $em = $this->getEntityManager();

            $times = new TimetableRowTimes();
            $times->setTimetable($timetable);
            $times->setTimetableRow($timetableRow);

            $em->persist($timetable);
            $em->flush();
        }

        return $times->getTimes();
    }

    public function calculateContractorBalance(Timetable $timetable, Contractor $contractor)
    {
        $em = $this->getEntityManager();

        $timetables = $em->getRepository('AppBundle:Timetable')->getAllPrevious($timetable);

        if ($contractor->getType() == Contractor::PROVIDER) {
            $timetableRows = $em->getRepository('AppBundle:TimetableRow')->findBy(['provider' => $contractor]);
        } else {
            $timetableRows = $em->getRepository('AppBundle:TimetableRow')->findBy(['customer' => $contractor]);
        }

        $timetableRowTimes = $this->findBy([
            'timetable' => $timetables,
            'timetableRow' => $timetableRows,
        ]);

        $total = 0;

        /** @var TimetableRowTimes $timetableRowTime */
        foreach ($timetableRowTimes as $timetableRowTime) {
            $timetableRow = $timetableRowTime->getTimetableRow();
            $sumTimes = $this->sumTimes($timetableRowTime->getTimes());

            $total += ($timetableRow * $sumTimes);
        }

        return $total;
    }

    /**
     * @param array $times
     * @return int
     */
    public function sumTimes(array $times)
    {
        $sumTimes = 0;
        foreach ($times as $time) {
            if (is_int($time)) {
                $sumTimes += $time;
            }
        }

        return $sumTimes;
    }
}
